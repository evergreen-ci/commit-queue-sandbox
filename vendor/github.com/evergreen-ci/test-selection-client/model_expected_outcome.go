/*
Test Selection Services

Test Selection services, owner: DevProd Services & Integrations team

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ExpectedOutcome The expected outcome of a test for the selected strategy
type ExpectedOutcome string

// List of ExpectedOutcome
const (
	SUCCESS ExpectedOutcome = "success"
	FAILURE ExpectedOutcome = "failure"
	UNKNOWN ExpectedOutcome = "unknown"
)

// All allowed values of ExpectedOutcome enum
var AllowedExpectedOutcomeEnumValues = []ExpectedOutcome{
	"success",
	"failure",
	"unknown",
}

func (v *ExpectedOutcome) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExpectedOutcome(value)
	for _, existing := range AllowedExpectedOutcomeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExpectedOutcome", value)
}

// NewExpectedOutcomeFromValue returns a pointer to a valid ExpectedOutcome
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExpectedOutcomeFromValue(v string) (*ExpectedOutcome, error) {
	ev := ExpectedOutcome(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExpectedOutcome: valid values are %v", v, AllowedExpectedOutcomeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExpectedOutcome) IsValid() bool {
	for _, existing := range AllowedExpectedOutcomeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExpectedOutcome value
func (v ExpectedOutcome) Ptr() *ExpectedOutcome {
	return &v
}

type NullableExpectedOutcome struct {
	value *ExpectedOutcome
	isSet bool
}

func (v NullableExpectedOutcome) Get() *ExpectedOutcome {
	return v.value
}

func (v *NullableExpectedOutcome) Set(val *ExpectedOutcome) {
	v.value = val
	v.isSet = true
}

func (v NullableExpectedOutcome) IsSet() bool {
	return v.isSet
}

func (v *NullableExpectedOutcome) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpectedOutcome(val *ExpectedOutcome) *NullableExpectedOutcome {
	return &NullableExpectedOutcome{value: val, isSet: true}
}

func (v NullableExpectedOutcome) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpectedOutcome) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

