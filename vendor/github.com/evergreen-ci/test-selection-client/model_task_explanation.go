/*
Test Selection Services

Test Selection services, owner: DevProd Services & Integrations team

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TaskExplanation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskExplanation{}

// TaskExplanation Explanation of the results of a single task.
type TaskExplanation struct {
	TaskName string `json:"task_name"`
	Tests map[string]TestExplanation `json:"tests,omitempty"`
}

type _TaskExplanation TaskExplanation

// NewTaskExplanation instantiates a new TaskExplanation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskExplanation(taskName string) *TaskExplanation {
	this := TaskExplanation{}
	this.TaskName = taskName
	return &this
}

// NewTaskExplanationWithDefaults instantiates a new TaskExplanation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskExplanationWithDefaults() *TaskExplanation {
	this := TaskExplanation{}
	return &this
}

// GetTaskName returns the TaskName field value
func (o *TaskExplanation) GetTaskName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskName
}

// GetTaskNameOk returns a tuple with the TaskName field value
// and a boolean to check if the value has been set.
func (o *TaskExplanation) GetTaskNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskName, true
}

// SetTaskName sets field value
func (o *TaskExplanation) SetTaskName(v string) {
	o.TaskName = v
}

// GetTests returns the Tests field value if set, zero value otherwise.
func (o *TaskExplanation) GetTests() map[string]TestExplanation {
	if o == nil || IsNil(o.Tests) {
		var ret map[string]TestExplanation
		return ret
	}
	return o.Tests
}

// GetTestsOk returns a tuple with the Tests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskExplanation) GetTestsOk() (map[string]TestExplanation, bool) {
	if o == nil || IsNil(o.Tests) {
		return map[string]TestExplanation{}, false
	}
	return o.Tests, true
}

// HasTests returns a boolean if a field has been set.
func (o *TaskExplanation) HasTests() bool {
	if o != nil && !IsNil(o.Tests) {
		return true
	}

	return false
}

// SetTests gets a reference to the given map[string]TestExplanation and assigns it to the Tests field.
func (o *TaskExplanation) SetTests(v map[string]TestExplanation) {
	o.Tests = v
}

func (o TaskExplanation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskExplanation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["task_name"] = o.TaskName
	if !IsNil(o.Tests) {
		toSerialize["tests"] = o.Tests
	}
	return toSerialize, nil
}

func (o *TaskExplanation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"task_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaskExplanation := _TaskExplanation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTaskExplanation)

	if err != nil {
		return err
	}

	*o = TaskExplanation(varTaskExplanation)

	return err
}

type NullableTaskExplanation struct {
	value *TaskExplanation
	isSet bool
}

func (v NullableTaskExplanation) Get() *TaskExplanation {
	return v.value
}

func (v *NullableTaskExplanation) Set(val *TaskExplanation) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskExplanation) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskExplanation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskExplanation(val *TaskExplanation) *NullableTaskExplanation {
	return &NullableTaskExplanation{value: val, isSet: true}
}

func (v NullableTaskExplanation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskExplanation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


