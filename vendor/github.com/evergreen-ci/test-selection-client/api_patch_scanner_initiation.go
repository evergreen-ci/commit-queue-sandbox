/*
Test Selection Services

Test Selection services, owner: DevProd Services & Integrations team

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PatchScannerInitiationAPIService PatchScannerInitiationAPI service
type PatchScannerInitiationAPIService service

type ApiScanPatchesApiTestSelectionPatchScannerProjectIdPostRequest struct {
	ctx context.Context
	ApiService *PatchScannerInitiationAPIService
	projectId string
	strategyEnum *[]StrategyEnum
}

func (r ApiScanPatchesApiTestSelectionPatchScannerProjectIdPostRequest) StrategyEnum(strategyEnum []StrategyEnum) ApiScanPatchesApiTestSelectionPatchScannerProjectIdPostRequest {
	r.strategyEnum = &strategyEnum
	return r
}

func (r ApiScanPatchesApiTestSelectionPatchScannerProjectIdPostRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.ScanPatchesApiTestSelectionPatchScannerProjectIdPostExecute(r)
}

/*
ScanPatchesApiTestSelectionPatchScannerProjectIdPost Scan Patches

Run over all patches of the last day in a project
:param project_id: The project id.
:param strategies: The set of strategies to use
:return: None

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId
 @return ApiScanPatchesApiTestSelectionPatchScannerProjectIdPostRequest
*/
func (a *PatchScannerInitiationAPIService) ScanPatchesApiTestSelectionPatchScannerProjectIdPost(ctx context.Context, projectId string) ApiScanPatchesApiTestSelectionPatchScannerProjectIdPostRequest {
	return ApiScanPatchesApiTestSelectionPatchScannerProjectIdPostRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return interface{}
func (a *PatchScannerInitiationAPIService) ScanPatchesApiTestSelectionPatchScannerProjectIdPostExecute(r ApiScanPatchesApiTestSelectionPatchScannerProjectIdPostRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchScannerInitiationAPIService.ScanPatchesApiTestSelectionPatchScannerProjectIdPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/test_selection/patch_scanner/{project_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.strategyEnum
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiScanSinglePatchApiTestSelectionSinglePatchScannerPatchIdPostRequest struct {
	ctx context.Context
	ApiService *PatchScannerInitiationAPIService
	patchId string
	strategyEnum *[]StrategyEnum
}

func (r ApiScanSinglePatchApiTestSelectionSinglePatchScannerPatchIdPostRequest) StrategyEnum(strategyEnum []StrategyEnum) ApiScanSinglePatchApiTestSelectionSinglePatchScannerPatchIdPostRequest {
	r.strategyEnum = &strategyEnum
	return r
}

func (r ApiScanSinglePatchApiTestSelectionSinglePatchScannerPatchIdPostRequest) Execute() (*PatchExplanation, *http.Response, error) {
	return r.ApiService.ScanSinglePatchApiTestSelectionSinglePatchScannerPatchIdPostExecute(r)
}

/*
ScanSinglePatchApiTestSelectionSinglePatchScannerPatchIdPost Scan Single Patch

Run over all patches of the last day in a project
:param patch_id: The patch id.
:param strategies: The set of strategies to use
:return: None

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param patchId
 @return ApiScanSinglePatchApiTestSelectionSinglePatchScannerPatchIdPostRequest
*/
func (a *PatchScannerInitiationAPIService) ScanSinglePatchApiTestSelectionSinglePatchScannerPatchIdPost(ctx context.Context, patchId string) ApiScanSinglePatchApiTestSelectionSinglePatchScannerPatchIdPostRequest {
	return ApiScanSinglePatchApiTestSelectionSinglePatchScannerPatchIdPostRequest{
		ApiService: a,
		ctx: ctx,
		patchId: patchId,
	}
}

// Execute executes the request
//  @return PatchExplanation
func (a *PatchScannerInitiationAPIService) ScanSinglePatchApiTestSelectionSinglePatchScannerPatchIdPostExecute(r ApiScanSinglePatchApiTestSelectionSinglePatchScannerPatchIdPostRequest) (*PatchExplanation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PatchExplanation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PatchScannerInitiationAPIService.ScanSinglePatchApiTestSelectionSinglePatchScannerPatchIdPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/test_selection/single_patch_scanner/{patch_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"patch_id"+"}", url.PathEscape(parameterValueToString(r.patchId, "patchId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.strategyEnum
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
