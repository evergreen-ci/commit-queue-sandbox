/*
Test Selection Services

Test Selection services, owner: DevProd Services & Integrations team

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SuccessMeasure type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuccessMeasure{}

// SuccessMeasure This class is used to calculate the \"magic number\" that denotes the efficiency of a strategy  The \"magic numbers\" are: 1. How many tests were processed: total_number_of_tests 2. What percentage of selected tests matched the expected outcome     (number_of_correctly_selected_expected_outcome_passing_tests / number_of_selected_tests) 3. What percentage of unselected tests matched the expected outcome     (number_of_correctly_unselected_expected_outcome_passing_tests / number_of_unselected_tests) 4. The overall success of the patch     (number_of_correctly_selected_expected_outcome_passing_tests +     number_of_correctly_unselected_expected_outcome_passing_tests)     / total_number_of_tests
type SuccessMeasure struct {
	TotalNumberOfTests *int32 `json:"total_number_of_tests,omitempty"`
	NumberOfSelectedTests *int32 `json:"number_of_selected_tests,omitempty"`
	NumberOfUnselectedTests *int32 `json:"number_of_unselected_tests,omitempty"`
	NumberOfCorrectlySelectedExpectedOutcomePassingTests *int32 `json:"number_of_correctly_selected_expected_outcome_passing_tests,omitempty"`
	NumberOfCorrectlyUnselectedExpectedOutcomePassingTests *int32 `json:"number_of_correctly_unselected_expected_outcome_passing_tests,omitempty"`
	SelectedWithoutFilter *int32 `json:"selected_without_filter,omitempty"`
	NumberOfSelectedUnknownExpectedOutcomeTests *int32 `json:"number_of_selected_unknown_expected_outcome_tests,omitempty"`
	NumberOfUnselectedUnknownExpectedOutcomeTests *int32 `json:"number_of_unselected_unknown_expected_outcome_tests,omitempty"`
}

// NewSuccessMeasure instantiates a new SuccessMeasure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuccessMeasure() *SuccessMeasure {
	this := SuccessMeasure{}
	var totalNumberOfTests int32 = 0
	this.TotalNumberOfTests = &totalNumberOfTests
	var numberOfSelectedTests int32 = 0
	this.NumberOfSelectedTests = &numberOfSelectedTests
	var numberOfUnselectedTests int32 = 0
	this.NumberOfUnselectedTests = &numberOfUnselectedTests
	var numberOfCorrectlySelectedExpectedOutcomePassingTests int32 = 0
	this.NumberOfCorrectlySelectedExpectedOutcomePassingTests = &numberOfCorrectlySelectedExpectedOutcomePassingTests
	var numberOfCorrectlyUnselectedExpectedOutcomePassingTests int32 = 0
	this.NumberOfCorrectlyUnselectedExpectedOutcomePassingTests = &numberOfCorrectlyUnselectedExpectedOutcomePassingTests
	var selectedWithoutFilter int32 = 0
	this.SelectedWithoutFilter = &selectedWithoutFilter
	var numberOfSelectedUnknownExpectedOutcomeTests int32 = 0
	this.NumberOfSelectedUnknownExpectedOutcomeTests = &numberOfSelectedUnknownExpectedOutcomeTests
	var numberOfUnselectedUnknownExpectedOutcomeTests int32 = 0
	this.NumberOfUnselectedUnknownExpectedOutcomeTests = &numberOfUnselectedUnknownExpectedOutcomeTests
	return &this
}

// NewSuccessMeasureWithDefaults instantiates a new SuccessMeasure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuccessMeasureWithDefaults() *SuccessMeasure {
	this := SuccessMeasure{}
	var totalNumberOfTests int32 = 0
	this.TotalNumberOfTests = &totalNumberOfTests
	var numberOfSelectedTests int32 = 0
	this.NumberOfSelectedTests = &numberOfSelectedTests
	var numberOfUnselectedTests int32 = 0
	this.NumberOfUnselectedTests = &numberOfUnselectedTests
	var numberOfCorrectlySelectedExpectedOutcomePassingTests int32 = 0
	this.NumberOfCorrectlySelectedExpectedOutcomePassingTests = &numberOfCorrectlySelectedExpectedOutcomePassingTests
	var numberOfCorrectlyUnselectedExpectedOutcomePassingTests int32 = 0
	this.NumberOfCorrectlyUnselectedExpectedOutcomePassingTests = &numberOfCorrectlyUnselectedExpectedOutcomePassingTests
	var selectedWithoutFilter int32 = 0
	this.SelectedWithoutFilter = &selectedWithoutFilter
	var numberOfSelectedUnknownExpectedOutcomeTests int32 = 0
	this.NumberOfSelectedUnknownExpectedOutcomeTests = &numberOfSelectedUnknownExpectedOutcomeTests
	var numberOfUnselectedUnknownExpectedOutcomeTests int32 = 0
	this.NumberOfUnselectedUnknownExpectedOutcomeTests = &numberOfUnselectedUnknownExpectedOutcomeTests
	return &this
}

// GetTotalNumberOfTests returns the TotalNumberOfTests field value if set, zero value otherwise.
func (o *SuccessMeasure) GetTotalNumberOfTests() int32 {
	if o == nil || IsNil(o.TotalNumberOfTests) {
		var ret int32
		return ret
	}
	return *o.TotalNumberOfTests
}

// GetTotalNumberOfTestsOk returns a tuple with the TotalNumberOfTests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuccessMeasure) GetTotalNumberOfTestsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalNumberOfTests) {
		return nil, false
	}
	return o.TotalNumberOfTests, true
}

// HasTotalNumberOfTests returns a boolean if a field has been set.
func (o *SuccessMeasure) HasTotalNumberOfTests() bool {
	if o != nil && !IsNil(o.TotalNumberOfTests) {
		return true
	}

	return false
}

// SetTotalNumberOfTests gets a reference to the given int32 and assigns it to the TotalNumberOfTests field.
func (o *SuccessMeasure) SetTotalNumberOfTests(v int32) {
	o.TotalNumberOfTests = &v
}

// GetNumberOfSelectedTests returns the NumberOfSelectedTests field value if set, zero value otherwise.
func (o *SuccessMeasure) GetNumberOfSelectedTests() int32 {
	if o == nil || IsNil(o.NumberOfSelectedTests) {
		var ret int32
		return ret
	}
	return *o.NumberOfSelectedTests
}

// GetNumberOfSelectedTestsOk returns a tuple with the NumberOfSelectedTests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuccessMeasure) GetNumberOfSelectedTestsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfSelectedTests) {
		return nil, false
	}
	return o.NumberOfSelectedTests, true
}

// HasNumberOfSelectedTests returns a boolean if a field has been set.
func (o *SuccessMeasure) HasNumberOfSelectedTests() bool {
	if o != nil && !IsNil(o.NumberOfSelectedTests) {
		return true
	}

	return false
}

// SetNumberOfSelectedTests gets a reference to the given int32 and assigns it to the NumberOfSelectedTests field.
func (o *SuccessMeasure) SetNumberOfSelectedTests(v int32) {
	o.NumberOfSelectedTests = &v
}

// GetNumberOfUnselectedTests returns the NumberOfUnselectedTests field value if set, zero value otherwise.
func (o *SuccessMeasure) GetNumberOfUnselectedTests() int32 {
	if o == nil || IsNil(o.NumberOfUnselectedTests) {
		var ret int32
		return ret
	}
	return *o.NumberOfUnselectedTests
}

// GetNumberOfUnselectedTestsOk returns a tuple with the NumberOfUnselectedTests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuccessMeasure) GetNumberOfUnselectedTestsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfUnselectedTests) {
		return nil, false
	}
	return o.NumberOfUnselectedTests, true
}

// HasNumberOfUnselectedTests returns a boolean if a field has been set.
func (o *SuccessMeasure) HasNumberOfUnselectedTests() bool {
	if o != nil && !IsNil(o.NumberOfUnselectedTests) {
		return true
	}

	return false
}

// SetNumberOfUnselectedTests gets a reference to the given int32 and assigns it to the NumberOfUnselectedTests field.
func (o *SuccessMeasure) SetNumberOfUnselectedTests(v int32) {
	o.NumberOfUnselectedTests = &v
}

// GetNumberOfCorrectlySelectedExpectedOutcomePassingTests returns the NumberOfCorrectlySelectedExpectedOutcomePassingTests field value if set, zero value otherwise.
func (o *SuccessMeasure) GetNumberOfCorrectlySelectedExpectedOutcomePassingTests() int32 {
	if o == nil || IsNil(o.NumberOfCorrectlySelectedExpectedOutcomePassingTests) {
		var ret int32
		return ret
	}
	return *o.NumberOfCorrectlySelectedExpectedOutcomePassingTests
}

// GetNumberOfCorrectlySelectedExpectedOutcomePassingTestsOk returns a tuple with the NumberOfCorrectlySelectedExpectedOutcomePassingTests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuccessMeasure) GetNumberOfCorrectlySelectedExpectedOutcomePassingTestsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfCorrectlySelectedExpectedOutcomePassingTests) {
		return nil, false
	}
	return o.NumberOfCorrectlySelectedExpectedOutcomePassingTests, true
}

// HasNumberOfCorrectlySelectedExpectedOutcomePassingTests returns a boolean if a field has been set.
func (o *SuccessMeasure) HasNumberOfCorrectlySelectedExpectedOutcomePassingTests() bool {
	if o != nil && !IsNil(o.NumberOfCorrectlySelectedExpectedOutcomePassingTests) {
		return true
	}

	return false
}

// SetNumberOfCorrectlySelectedExpectedOutcomePassingTests gets a reference to the given int32 and assigns it to the NumberOfCorrectlySelectedExpectedOutcomePassingTests field.
func (o *SuccessMeasure) SetNumberOfCorrectlySelectedExpectedOutcomePassingTests(v int32) {
	o.NumberOfCorrectlySelectedExpectedOutcomePassingTests = &v
}

// GetNumberOfCorrectlyUnselectedExpectedOutcomePassingTests returns the NumberOfCorrectlyUnselectedExpectedOutcomePassingTests field value if set, zero value otherwise.
func (o *SuccessMeasure) GetNumberOfCorrectlyUnselectedExpectedOutcomePassingTests() int32 {
	if o == nil || IsNil(o.NumberOfCorrectlyUnselectedExpectedOutcomePassingTests) {
		var ret int32
		return ret
	}
	return *o.NumberOfCorrectlyUnselectedExpectedOutcomePassingTests
}

// GetNumberOfCorrectlyUnselectedExpectedOutcomePassingTestsOk returns a tuple with the NumberOfCorrectlyUnselectedExpectedOutcomePassingTests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuccessMeasure) GetNumberOfCorrectlyUnselectedExpectedOutcomePassingTestsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfCorrectlyUnselectedExpectedOutcomePassingTests) {
		return nil, false
	}
	return o.NumberOfCorrectlyUnselectedExpectedOutcomePassingTests, true
}

// HasNumberOfCorrectlyUnselectedExpectedOutcomePassingTests returns a boolean if a field has been set.
func (o *SuccessMeasure) HasNumberOfCorrectlyUnselectedExpectedOutcomePassingTests() bool {
	if o != nil && !IsNil(o.NumberOfCorrectlyUnselectedExpectedOutcomePassingTests) {
		return true
	}

	return false
}

// SetNumberOfCorrectlyUnselectedExpectedOutcomePassingTests gets a reference to the given int32 and assigns it to the NumberOfCorrectlyUnselectedExpectedOutcomePassingTests field.
func (o *SuccessMeasure) SetNumberOfCorrectlyUnselectedExpectedOutcomePassingTests(v int32) {
	o.NumberOfCorrectlyUnselectedExpectedOutcomePassingTests = &v
}

// GetSelectedWithoutFilter returns the SelectedWithoutFilter field value if set, zero value otherwise.
func (o *SuccessMeasure) GetSelectedWithoutFilter() int32 {
	if o == nil || IsNil(o.SelectedWithoutFilter) {
		var ret int32
		return ret
	}
	return *o.SelectedWithoutFilter
}

// GetSelectedWithoutFilterOk returns a tuple with the SelectedWithoutFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuccessMeasure) GetSelectedWithoutFilterOk() (*int32, bool) {
	if o == nil || IsNil(o.SelectedWithoutFilter) {
		return nil, false
	}
	return o.SelectedWithoutFilter, true
}

// HasSelectedWithoutFilter returns a boolean if a field has been set.
func (o *SuccessMeasure) HasSelectedWithoutFilter() bool {
	if o != nil && !IsNil(o.SelectedWithoutFilter) {
		return true
	}

	return false
}

// SetSelectedWithoutFilter gets a reference to the given int32 and assigns it to the SelectedWithoutFilter field.
func (o *SuccessMeasure) SetSelectedWithoutFilter(v int32) {
	o.SelectedWithoutFilter = &v
}

// GetNumberOfSelectedUnknownExpectedOutcomeTests returns the NumberOfSelectedUnknownExpectedOutcomeTests field value if set, zero value otherwise.
func (o *SuccessMeasure) GetNumberOfSelectedUnknownExpectedOutcomeTests() int32 {
	if o == nil || IsNil(o.NumberOfSelectedUnknownExpectedOutcomeTests) {
		var ret int32
		return ret
	}
	return *o.NumberOfSelectedUnknownExpectedOutcomeTests
}

// GetNumberOfSelectedUnknownExpectedOutcomeTestsOk returns a tuple with the NumberOfSelectedUnknownExpectedOutcomeTests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuccessMeasure) GetNumberOfSelectedUnknownExpectedOutcomeTestsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfSelectedUnknownExpectedOutcomeTests) {
		return nil, false
	}
	return o.NumberOfSelectedUnknownExpectedOutcomeTests, true
}

// HasNumberOfSelectedUnknownExpectedOutcomeTests returns a boolean if a field has been set.
func (o *SuccessMeasure) HasNumberOfSelectedUnknownExpectedOutcomeTests() bool {
	if o != nil && !IsNil(o.NumberOfSelectedUnknownExpectedOutcomeTests) {
		return true
	}

	return false
}

// SetNumberOfSelectedUnknownExpectedOutcomeTests gets a reference to the given int32 and assigns it to the NumberOfSelectedUnknownExpectedOutcomeTests field.
func (o *SuccessMeasure) SetNumberOfSelectedUnknownExpectedOutcomeTests(v int32) {
	o.NumberOfSelectedUnknownExpectedOutcomeTests = &v
}

// GetNumberOfUnselectedUnknownExpectedOutcomeTests returns the NumberOfUnselectedUnknownExpectedOutcomeTests field value if set, zero value otherwise.
func (o *SuccessMeasure) GetNumberOfUnselectedUnknownExpectedOutcomeTests() int32 {
	if o == nil || IsNil(o.NumberOfUnselectedUnknownExpectedOutcomeTests) {
		var ret int32
		return ret
	}
	return *o.NumberOfUnselectedUnknownExpectedOutcomeTests
}

// GetNumberOfUnselectedUnknownExpectedOutcomeTestsOk returns a tuple with the NumberOfUnselectedUnknownExpectedOutcomeTests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuccessMeasure) GetNumberOfUnselectedUnknownExpectedOutcomeTestsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfUnselectedUnknownExpectedOutcomeTests) {
		return nil, false
	}
	return o.NumberOfUnselectedUnknownExpectedOutcomeTests, true
}

// HasNumberOfUnselectedUnknownExpectedOutcomeTests returns a boolean if a field has been set.
func (o *SuccessMeasure) HasNumberOfUnselectedUnknownExpectedOutcomeTests() bool {
	if o != nil && !IsNil(o.NumberOfUnselectedUnknownExpectedOutcomeTests) {
		return true
	}

	return false
}

// SetNumberOfUnselectedUnknownExpectedOutcomeTests gets a reference to the given int32 and assigns it to the NumberOfUnselectedUnknownExpectedOutcomeTests field.
func (o *SuccessMeasure) SetNumberOfUnselectedUnknownExpectedOutcomeTests(v int32) {
	o.NumberOfUnselectedUnknownExpectedOutcomeTests = &v
}

func (o SuccessMeasure) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuccessMeasure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TotalNumberOfTests) {
		toSerialize["total_number_of_tests"] = o.TotalNumberOfTests
	}
	if !IsNil(o.NumberOfSelectedTests) {
		toSerialize["number_of_selected_tests"] = o.NumberOfSelectedTests
	}
	if !IsNil(o.NumberOfUnselectedTests) {
		toSerialize["number_of_unselected_tests"] = o.NumberOfUnselectedTests
	}
	if !IsNil(o.NumberOfCorrectlySelectedExpectedOutcomePassingTests) {
		toSerialize["number_of_correctly_selected_expected_outcome_passing_tests"] = o.NumberOfCorrectlySelectedExpectedOutcomePassingTests
	}
	if !IsNil(o.NumberOfCorrectlyUnselectedExpectedOutcomePassingTests) {
		toSerialize["number_of_correctly_unselected_expected_outcome_passing_tests"] = o.NumberOfCorrectlyUnselectedExpectedOutcomePassingTests
	}
	if !IsNil(o.SelectedWithoutFilter) {
		toSerialize["selected_without_filter"] = o.SelectedWithoutFilter
	}
	if !IsNil(o.NumberOfSelectedUnknownExpectedOutcomeTests) {
		toSerialize["number_of_selected_unknown_expected_outcome_tests"] = o.NumberOfSelectedUnknownExpectedOutcomeTests
	}
	if !IsNil(o.NumberOfUnselectedUnknownExpectedOutcomeTests) {
		toSerialize["number_of_unselected_unknown_expected_outcome_tests"] = o.NumberOfUnselectedUnknownExpectedOutcomeTests
	}
	return toSerialize, nil
}

type NullableSuccessMeasure struct {
	value *SuccessMeasure
	isSet bool
}

func (v NullableSuccessMeasure) Get() *SuccessMeasure {
	return v.value
}

func (v *NullableSuccessMeasure) Set(val *SuccessMeasure) {
	v.value = val
	v.isSet = true
}

func (v NullableSuccessMeasure) IsSet() bool {
	return v.isSet
}

func (v *NullableSuccessMeasure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuccessMeasure(val *SuccessMeasure) *NullableSuccessMeasure {
	return &NullableSuccessMeasure{value: val, isSet: true}
}

func (v NullableSuccessMeasure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuccessMeasure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


