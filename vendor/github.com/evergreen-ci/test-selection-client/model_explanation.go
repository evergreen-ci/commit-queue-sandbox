/*
Test Selection Services

Test Selection services, owner: DevProd Services & Integrations team

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Explanation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Explanation{}

// Explanation Explanation of the results of a single test.
type Explanation struct {
	TestName string `json:"test_name"`
	Strategy StrategyEnum `json:"strategy"`
	Selected bool `json:"selected"`
	ExpectedOutcome ExpectedOutcome `json:"expected_outcome"`
	Explanation string `json:"explanation"`
}

type _Explanation Explanation

// NewExplanation instantiates a new Explanation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExplanation(testName string, strategy StrategyEnum, selected bool, expectedOutcome ExpectedOutcome, explanation string) *Explanation {
	this := Explanation{}
	this.TestName = testName
	this.Strategy = strategy
	this.Selected = selected
	this.ExpectedOutcome = expectedOutcome
	this.Explanation = explanation
	return &this
}

// NewExplanationWithDefaults instantiates a new Explanation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExplanationWithDefaults() *Explanation {
	this := Explanation{}
	return &this
}

// GetTestName returns the TestName field value
func (o *Explanation) GetTestName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TestName
}

// GetTestNameOk returns a tuple with the TestName field value
// and a boolean to check if the value has been set.
func (o *Explanation) GetTestNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestName, true
}

// SetTestName sets field value
func (o *Explanation) SetTestName(v string) {
	o.TestName = v
}

// GetStrategy returns the Strategy field value
func (o *Explanation) GetStrategy() StrategyEnum {
	if o == nil {
		var ret StrategyEnum
		return ret
	}

	return o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value
// and a boolean to check if the value has been set.
func (o *Explanation) GetStrategyOk() (*StrategyEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Strategy, true
}

// SetStrategy sets field value
func (o *Explanation) SetStrategy(v StrategyEnum) {
	o.Strategy = v
}

// GetSelected returns the Selected field value
func (o *Explanation) GetSelected() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Selected
}

// GetSelectedOk returns a tuple with the Selected field value
// and a boolean to check if the value has been set.
func (o *Explanation) GetSelectedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Selected, true
}

// SetSelected sets field value
func (o *Explanation) SetSelected(v bool) {
	o.Selected = v
}

// GetExpectedOutcome returns the ExpectedOutcome field value
func (o *Explanation) GetExpectedOutcome() ExpectedOutcome {
	if o == nil {
		var ret ExpectedOutcome
		return ret
	}

	return o.ExpectedOutcome
}

// GetExpectedOutcomeOk returns a tuple with the ExpectedOutcome field value
// and a boolean to check if the value has been set.
func (o *Explanation) GetExpectedOutcomeOk() (*ExpectedOutcome, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpectedOutcome, true
}

// SetExpectedOutcome sets field value
func (o *Explanation) SetExpectedOutcome(v ExpectedOutcome) {
	o.ExpectedOutcome = v
}

// GetExplanation returns the Explanation field value
func (o *Explanation) GetExplanation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Explanation
}

// GetExplanationOk returns a tuple with the Explanation field value
// and a boolean to check if the value has been set.
func (o *Explanation) GetExplanationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Explanation, true
}

// SetExplanation sets field value
func (o *Explanation) SetExplanation(v string) {
	o.Explanation = v
}

func (o Explanation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Explanation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["test_name"] = o.TestName
	toSerialize["strategy"] = o.Strategy
	toSerialize["selected"] = o.Selected
	toSerialize["expected_outcome"] = o.ExpectedOutcome
	toSerialize["explanation"] = o.Explanation
	return toSerialize, nil
}

func (o *Explanation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"test_name",
		"strategy",
		"selected",
		"expected_outcome",
		"explanation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExplanation := _Explanation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExplanation)

	if err != nil {
		return err
	}

	*o = Explanation(varExplanation)

	return err
}

type NullableExplanation struct {
	value *Explanation
	isSet bool
}

func (v NullableExplanation) Get() *Explanation {
	return v.value
}

func (v *NullableExplanation) Set(val *Explanation) {
	v.value = val
	v.isSet = true
}

func (v NullableExplanation) IsSet() bool {
	return v.isSet
}

func (v *NullableExplanation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExplanation(val *Explanation) *NullableExplanation {
	return &NullableExplanation{value: val, isSet: true}
}

func (v NullableExplanation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExplanation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


