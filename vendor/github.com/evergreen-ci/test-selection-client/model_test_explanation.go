/*
Test Selection Services

Test Selection services, owner: DevProd Services & Integrations team

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TestExplanation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestExplanation{}

// TestExplanation Explanation of the results of a single test.
type TestExplanation struct {
	TestName string `json:"test_name"`
	IsPassing bool `json:"is_passing"`
	Selected bool `json:"selected"`
	Explanation string `json:"explanation"`
	Explanations map[string]Explanation `json:"explanations,omitempty"`
	ExpectedOutcome ExpectedOutcome `json:"expected_outcome"`
}

type _TestExplanation TestExplanation

// NewTestExplanation instantiates a new TestExplanation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestExplanation(testName string, isPassing bool, selected bool, explanation string, expectedOutcome ExpectedOutcome) *TestExplanation {
	this := TestExplanation{}
	this.TestName = testName
	this.IsPassing = isPassing
	this.Selected = selected
	this.Explanation = explanation
	this.ExpectedOutcome = expectedOutcome
	return &this
}

// NewTestExplanationWithDefaults instantiates a new TestExplanation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestExplanationWithDefaults() *TestExplanation {
	this := TestExplanation{}
	return &this
}

// GetTestName returns the TestName field value
func (o *TestExplanation) GetTestName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TestName
}

// GetTestNameOk returns a tuple with the TestName field value
// and a boolean to check if the value has been set.
func (o *TestExplanation) GetTestNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestName, true
}

// SetTestName sets field value
func (o *TestExplanation) SetTestName(v string) {
	o.TestName = v
}

// GetIsPassing returns the IsPassing field value
func (o *TestExplanation) GetIsPassing() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPassing
}

// GetIsPassingOk returns a tuple with the IsPassing field value
// and a boolean to check if the value has been set.
func (o *TestExplanation) GetIsPassingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPassing, true
}

// SetIsPassing sets field value
func (o *TestExplanation) SetIsPassing(v bool) {
	o.IsPassing = v
}

// GetSelected returns the Selected field value
func (o *TestExplanation) GetSelected() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Selected
}

// GetSelectedOk returns a tuple with the Selected field value
// and a boolean to check if the value has been set.
func (o *TestExplanation) GetSelectedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Selected, true
}

// SetSelected sets field value
func (o *TestExplanation) SetSelected(v bool) {
	o.Selected = v
}

// GetExplanation returns the Explanation field value
func (o *TestExplanation) GetExplanation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Explanation
}

// GetExplanationOk returns a tuple with the Explanation field value
// and a boolean to check if the value has been set.
func (o *TestExplanation) GetExplanationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Explanation, true
}

// SetExplanation sets field value
func (o *TestExplanation) SetExplanation(v string) {
	o.Explanation = v
}

// GetExplanations returns the Explanations field value if set, zero value otherwise.
func (o *TestExplanation) GetExplanations() map[string]Explanation {
	if o == nil || IsNil(o.Explanations) {
		var ret map[string]Explanation
		return ret
	}
	return o.Explanations
}

// GetExplanationsOk returns a tuple with the Explanations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestExplanation) GetExplanationsOk() (map[string]Explanation, bool) {
	if o == nil || IsNil(o.Explanations) {
		return map[string]Explanation{}, false
	}
	return o.Explanations, true
}

// HasExplanations returns a boolean if a field has been set.
func (o *TestExplanation) HasExplanations() bool {
	if o != nil && !IsNil(o.Explanations) {
		return true
	}

	return false
}

// SetExplanations gets a reference to the given map[string]Explanation and assigns it to the Explanations field.
func (o *TestExplanation) SetExplanations(v map[string]Explanation) {
	o.Explanations = v
}

// GetExpectedOutcome returns the ExpectedOutcome field value
func (o *TestExplanation) GetExpectedOutcome() ExpectedOutcome {
	if o == nil {
		var ret ExpectedOutcome
		return ret
	}

	return o.ExpectedOutcome
}

// GetExpectedOutcomeOk returns a tuple with the ExpectedOutcome field value
// and a boolean to check if the value has been set.
func (o *TestExplanation) GetExpectedOutcomeOk() (*ExpectedOutcome, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpectedOutcome, true
}

// SetExpectedOutcome sets field value
func (o *TestExplanation) SetExpectedOutcome(v ExpectedOutcome) {
	o.ExpectedOutcome = v
}

func (o TestExplanation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestExplanation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["test_name"] = o.TestName
	toSerialize["is_passing"] = o.IsPassing
	toSerialize["selected"] = o.Selected
	toSerialize["explanation"] = o.Explanation
	if !IsNil(o.Explanations) {
		toSerialize["explanations"] = o.Explanations
	}
	toSerialize["expected_outcome"] = o.ExpectedOutcome
	return toSerialize, nil
}

func (o *TestExplanation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"test_name",
		"is_passing",
		"selected",
		"explanation",
		"expected_outcome",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestExplanation := _TestExplanation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestExplanation)

	if err != nil {
		return err
	}

	*o = TestExplanation(varTestExplanation)

	return err
}

type NullableTestExplanation struct {
	value *TestExplanation
	isSet bool
}

func (v NullableTestExplanation) Get() *TestExplanation {
	return v.value
}

func (v *NullableTestExplanation) Set(val *TestExplanation) {
	v.value = val
	v.isSet = true
}

func (v NullableTestExplanation) IsSet() bool {
	return v.isSet
}

func (v *NullableTestExplanation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestExplanation(val *TestExplanation) *NullableTestExplanation {
	return &NullableTestExplanation{value: val, isSet: true}
}

func (v NullableTestExplanation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestExplanation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


