stepback: true
exec_timeout_secs: 3600

parameters:
    - key: ENV_3
      value: "env_3_parameter_value"
    - key: ENV_4
      value: "env_4_parameter_value"

buildvariants:
    - display_name: Misc
      name: misc
      run_on:
          - ubuntu2204-small
      tasks:
          - name: parameters-env
      expansions:
          ENV_2: "env_2_bv_env_value"
          ENV_3: "env_3_bv_env_value"
          goos: linux
          goarch: amd64
          GOROOT: /opt/golang/go1.24
    - display_name: Tests
      name: ubuntu
      run_on:
          - ubuntu2204-small
      tasks:
          - name: first-task
          - name: another-task
            activate: false
          - name: long-task
            activate: false
          - name: short-task
            activate: false
          - name: oops-another-task
            activate: false
          - name: noise-task-1
            activate: false
          - name: noise-task-2
            activate: false
          - name: noise-task-3
            activate: false
          - name: generator
            activate: false
          - name: task-group
            activate: false
          - name: task-d
            activate: false
          - name: task-e
            activate: false
          - name: github.generate_token1
            activate: false
          - name: github.generate_token2
            activate: false
          - name: github.generate_token3
            activate: false
          - name: no-token
            activate: false
          - name: redacting-expansions
            activate: false
          - name: github_generate_token_task_group
            activate: false
          - name: minimal-task-group
            activate: false
          - name: execution-task-1
            activate: false
          - name: execution-task-2
            activate: false
          - name: execution-task-3
            activate: false
          - name: github_token_pre_post
            activate: false
          - name: github-dependency-task
            activate: false
          - name: github-dependent-task
            activate: false
          - name: github-restrict-permissions
            activate: false
          - name: github-honeycomb
          - name: github-invalid-repo
            activate: false
          - name: github-invalid-owner
            activate: false
          - name: s3put-test
            activate: false
          - name: assume_role_externalid
            activate: false
          - name: assume_role_no_externalid
            activate: false
          - name: gotestparsefiles
            activate: false
      display_tasks:
          - name: display-task
            execution_tasks:
                - execution-task-1
                - execution-task-2
                - execution-task-3

functions:
    clone-project:
        command: git.get_project
        params:
            directory: src

task_groups:
    - name: task-group
      activate: false
      max_hosts: 1
      tasks:
          - task-a
          - task-b
          - task-c
    - name: minimal-task-group
      activate: false
      max_hosts: 1
      setup_group_can_fail_task: true
      setup_group:
          - command: shell.exec
            params:
                script: "echo setup_group"
      setup_task_can_fail_task: true
      setup_task:
          - command: shell.exec
            params:
                script: "echo setup_task"
      teardown_task_can_fail_task: true
      teardown_task:
          - command: shell.exec
            params:
                script: "echo teardown task"
      teardown_group_can_fail_task: true
      teardown_group:
          - command: shell.exec
            params:
                script: "echo teardown group"
      timeout:
          - command: shell.exec
            params:
                script: "echo timeout"
      tasks:
          - simple_task_group_task
    - name: github_generate_token_task_group
      activate: false
      max_hosts: 1
      setup_group_can_fail_task: true
      setup_group:
          - command: github.generate_token
            params:
                expansion_name: github_token_setup_group
          - command: shell.exec
            params:
                script: |
                    echo "=== Setup group ==="
                    echo "setup_group:"
                    echo ${github_token_setup_group}
                    echo "setup_task:"
                    echo ${github_token_setup_task}
                    echo "task:"
                    echo ${github_token_task}
                    echo "teardown_task:"
                    echo ${github_token_teardown_task}
                    echo "teardown_group:"
                    echo ${github_token_teardown_group}
                    echo "timeout:"
                    echo ${github_token_timeout}
      setup_task_can_fail_task: true
      setup_task:
          - command: github.generate_token
            params:
                expansion_name: github_token_setup_task
          - command: shell.exec
            params:
                script: |
                    echo "=== Setup task ==="
                    echo "setup_group:"
                    echo ${github_token_setup_group}
                    echo "setup_task:"
                    echo ${github_token_setup_task}
                    echo "task:"
                    echo ${github_token_task}
                    echo "teardown_task:"
                    echo ${github_token_teardown_task}
                    echo "teardown_group:"
                    echo ${github_token_teardown_group}
                    echo "timeout:"
                    echo ${github_token_timeout}
      teardown_task_can_fail_task: true
      teardown_task:
          - command: github.generate_token
            params:
                expansion_name: github_token_teardown_task
          - command: shell.exec
            params:
                script: |
                    echo "=== Teardown task ==="
                    echo "setup_group:"
                    echo ${github_token_setup_group}
                    echo "setup_task:"
                    echo ${github_token_setup_task}
                    echo "task:"
                    echo ${github_token_task}
                    echo "teardown_task:"
                    echo ${github_token_teardown_task}
                    echo "teardown_group:"
                    echo ${github_token_teardown_group}
                    echo "timeout:"
                    echo ${github_token_timeout}
      teardown_group_can_fail_task: true
      teardown_group:
          - command: github.generate_token
            params:
                expansion_name: github_token_teardown_group
          - command: shell.exec
            params:
                script: |
                    echo "=== Teardown group ==="
                    echo "setup_group:"
                    echo ${github_token_setup_group}
                    echo "setup_task:"
                    echo ${github_token_setup_task}
                    echo "task:"
                    echo ${github_token_task}
                    echo "teardown_task:"
                    echo ${github_token_teardown_task}
                    echo "teardown_group:"
                    echo ${github_token_teardown_group}
                    echo "timeout:"
                    echo ${github_token_timeout}
      timeout:
          - command: github.generate_token
            params:
                expansion_name: github_token_timeout
          - command: shell.exec
            params:
                script: |
                    echo "=== Timeout ==="
                    echo "setup_group:"
                    echo ${github_token_setup_group}
                    echo "setup_task:"
                    echo ${github_token_setup_task}
                    echo "task:"
                    echo ${github_token_task}
                    echo "teardown_task:"
                    echo ${github_token_teardown_task}
                    echo "teardown_group:"
                    echo ${github_token_teardown_group}
                    echo "timeout:"
                    echo ${github_token_timeout}
      tasks:
          - github_token_task_group_task

tasks:
    - name: gotestparsefiles
      commands:
          - func: clone-project
          - command: shell.exec
            params:
                optional_tests: "true"
                include_expansions_in_env:
                    - GOROOT
                script: |
                    echo "Running go test"
                    cd src
                    mkdir output
                    /opt/golang/go1.24/bin/go test -v ./src/notestsrc/... | tee output/src.suite
          - command: gotest.parse_files
            params:
                files: ["src/output/*.suite"]
    - name: assume_role_no_externalid
      commands:
          - command: ec2.assume_role
            params:
                role_arn: ${AWS_ASSUME_ROLE_ARN_1}
    - name: assume_role_externalid
      commands:
          - command: ec2.assume_role
            params:
                role_arn: ${AWS_ASSUME_ROLE_ARN_2}
    - name: s3put-test
      commands:
          - func: clone-project
          - command: s3.put
            params:
                aws_key: ${AWS_ACCESS_KEY_ID}
                aws_secret: ${AWS_SECRET_ACCESS_KEY}
                aws_session_token: ${AWS_SESSION_TOKEN}
                local_file: src/evergreen.yml
                remote_file: mciuploads/zackary.santana/${version_id}/${task_id}/evergreen.yml
                bucket: mciuploads
                region: us-east-1
                permissions: public-read
                content_type: ${content_type|application/x-gzip}
                display_name: Binaries
                skip_existing: true
    - name: github-restrict-permissions
      commands:
          - command: github.generate_token
            params:
                expansion_name: github_generate_token
                permissions: # This should restrict the clone
                    checks: read
          - command: shell.exec
            params:
                script: |
                    echo ${github_generate_token}
                    git clone https://oauth2:${github_generate_token}@github.com/evergreen-ci/github-merge-queue-sandbox.git evg1
    - name: github-honeycomb
      commands:
          - command: github.generate_token
            params:
                expansion_name: github_generate_token
                owner: evergreen-ci
                repo: github-merge-queue-sandbox
          - command: shell.exec
            params:
                script: |
                    echo ${github_generate_token}
                    git clone https://oauth2:${github_generate_token}@github.com/evergreen-ci/github-merge-queue-sandbox.git evg1
    - name: github-invalid-repo
      commands:
          - command: github.generate_token
            params:
                expansion_name: token
                owner: evergreen-ci
                repo: invalid
          - command: shell.exec
            params:
                script: |
                    echo ${token}
                    git clone https://oauth2:${token}@github.com/evergreen-ci/github-merge-queue-sandbox.git evg1
    - name: github-invalid-owner
      commands:
          - command: github.generate_token
            params:
                expansion_name: token
                owner: invalid
                repo: evergreen
          - command: shell.exec
            params:
                script: |
                    echo ${token}
                    git clone https://oauth2:${token}@github.com/evergreen-ci/github-merge-queue-sandbox.git evg1
    - name: github-dependency-task
      commands:
          - command: github.generate_token
            params:
                owner: evergreen-ci
                repo: github-merge-queue-sandbox
                expansion_name: github-dependency-task-expansion
          - command: shell.exec
            params:
                script: |
                    echo "Trying to print dependency task expansion:"
                    echo ${github-dependency-task-expansion}
    - name: github-dependent-task
      depends_on:
          - github-dependency-task
      commands:
          - command: shell.exec
            params:
                script: |
                    echo "Trying to print dependency task expansion:"
                    echo ${github-dependency-task-expansion}
    - name: simple_task_group_task
      commands:
          - command: shell.exec
            params:
                script: "echo hello world"
    - name: task-a
      commands:
          - command: shell.exec
            params:
                script: "echo hello world"
    - name: task-b
      patch_only: true
      commands:
          - command: shell.exec
            params:
                script: "echo hello world"
    - name: task-c
      commands:
          - command: shell.exec
            params:
                script: "echo hello world"
      # depends_on: # depends on test
      #     - task-d
      #     - task-e
    - name: task-d
      patchable: false
      commands:
          - command: shell.exec
            params:
                script: "echo hello world"
    - name: task-e
      patchable: false
      commands:
          - command: shell.exec
            params:
                script: "echo hello world"
    - name: execution-task-1
      commands:
          - command: shell.exec
            params:
                script: |
                    if [ "${execution}" -eq 0 ]; then
                        echo "Task fail"
                        exit 1
                    else
                        echo "Task pass"
                        exit 0
                    fi
    - name: execution-task-2
      commands:
          - command: shell.exec
            params:
                script: |
                    exit 0
    - name: execution-task-3
      commands:
          - command: shell.exec
            params:
                script: |
                    exit 0
    - name: first-task
      commands:
          - command: shell.exec
            params:
                script: |
                    echo "Task"
                    # exit 1 #1
    - name: another-task
      depends_on:
          - noise-task-1
      commands:
          - command: shell.exec
            params:
                script: |
                    echo "Task"
                    # exit 1 #2
    - name: long-task
      commands:
          - command: shell.exec
            params:
                script: |
                    echo "Task"
                    # exit 1 #8
    - name: short-task
      commands:
          - command: shell.exec
            params:
                script: |
                    echo "Task"
                    # exit 1 #5
    - name: oops-another-task
      commands:
          - command: shell.exec
            params:
                script: |
                    echo "Task"
                    # exit 1 #7
    - name: noise-task-1
      commands:
          - command: shell.exec
            params:
                script: |
                    echo "Task"
                    exit 0
    - name: noise-task-2
      commands:
          - command: shell.exec
            params:
                script: |
                    echo "Task"
                    exit 0
    - name: noise-task-3
      commands:
          - command: shell.exec
            params:
                script: |
                    echo "Task"
                    exit 0
    - name: pregenerator-task
      activate: false
      commands:
          - command: shell.exec
            params:
                script: |
                    echo "This is activated by the 'generator' task."
                    exit 0
    - name: generator
      commands:
          - func: clone-project
          - command: generate.tasks
            params:
                files:
                    - src/generator.json
    - name: github.generate_token1
      commands:
          - command: github.generate_token
            params:
                owner: evergreen-ci
                repo: github-merge-queue-sandbox
                expansion_name: testing_expansion1
          - command: shell.exec
            params:
                script: |
                    echo ${testing_expansion1}
                    git clone https://oauth2:${testing_expansion1}@github.com/evergreen-ci/github-merge-queue-sandbox.git evg1
    - name: github.generate_token2
      commands:
          - command: github.generate_token
            params:
                owner: evergreen-ci
                repo: github-merge-queue-sandbox
                expansion_name: testing_expansion2
                permissions: # In theory, this should strip it of contents. and this task should fail.
                    checks: read
          - command: shell.exec
            params:
                script: |
                    echo ${testing_expansion2}
                    # git clone https://oauth2:${testing_expansion2}@github.com/evergreen-ci/github-merge-queue-sandbox.git evg1
                    echo 'This would fail if it ran.'
    - name: github.generate_token3
      commands:
          - command: github.generate_token
            params:
                expansion_name: testing_expansion2
          - command: shell.exec
            params:
                script: |
                    echo ${testing_expansion2}
                    git clone https://oauth2:${testing_expansion2}@github.com/evergreen-ci/github-merge-queue-sandbox.git evg1
    - name: github_token_pre_post
      commands:
          - command: github.generate_token
            params:
                owner: evergreen-ci
                repo: github-merge-queue-sandbox
                expansion_name: github_token_main
          - command: shell.exec
            params:
                script: |
                    echo "=== Main ==="
                    echo "Pre token:"
                    echo ${github_token_pre}
                    echo "Main token:"
                    echo ${github_token_main}
                    echo "Post token:"
                    echo ${github_token_post}
    - name: no-token
      commands:
          - command: shell.exec
            params:
                script: |
                    # git clone https://github.com/evergreen-ci/github-merge-queue-sandbox.git evg1
                    echo 'This would fail if it ran.'
    - name: github_token_task_group_task
      commands:
          - command: github.generate_token
            params:
                expansion_name: github_token_task
          - command: shell.exec
            params:
                script: |
                    echo "=== Main task ==="
                    echo "setup_group:"
                    echo ${github_token_setup_group}
                    echo "setup_task:"
                    echo ${github_token_setup_task}
                    echo "task:"
                    echo ${github_token_task}
                    echo "teardown_task:"
                    echo ${github_token_teardown_task}
                    echo "teardown_group:"
                    echo ${github_token_teardown_group}
                    echo "timeout:"
                    echo ${github_token_timeout}
          - command: shell.exec
            params:
                script: |
                    echo "Clone project with setup group"
                    git clone https://oauth2:${github_token_setup_group}@github.com/evergreen-ci/github-merge-queue-sandbox.git setup_group
          - command: shell.exec
            params:
                script: |
                    echo "Clone project with setup task"
                    git clone https://oauth2:${github_token_setup_task}@github.com/evergreen-ci/github-merge-queue-sandbox.git setup_task
    - name: redacting-expansions
      commands:
          - func: clone-project
          - command: expansions.update
            params:
                updates:
                    - key: testing_expansion2
                      value: "expansion#2 says hi"
                    - key: testing_expansion4
                      value: "expansion#4 says hi"
          - command: expansions.update
            params:
                updates:
                    - key: testing_expansion1
                      value: "expansion#1 says hi v1"
                    - key: testing_expansion2
                      concat: " let me add on to that!"
                    - key: testing_expansion3
                      value: "expansion#3 says hi"
                      redact: true
                    - key: testing_expansion4
                      concat: " let me add on to that!"
                      redact: true
                    - key: testing_expansion1
                      value: "expansion#1 says hi v2"
                      redact: true
                    - key: testing_expansion1
                      value: "expansion#1 says hi v3"
          - command: expansions.update
            params:
                file: src/expansions.yaml
          - command: expansions.update
            params:
                file: src/expansions.redact.yaml
                redact_file_expansions: true
          - command: shell.exec
            params:
                script: |
                    echo "Expansion #1 v1 should not redact"
                    echo "expansion#1 says hi v1"
                    echo "Expansion #1 v2 should redact"
                    echo "expansion#1 says hi v2"
                    echo "Expansion #1 v3 should not redact"
                    echo "expansion#1 says hi v3"
                    echo "Expansion #2"
                    echo ${testing_expansion2}
                    echo "Expansion #3"
                    echo ${testing_expansion3}
                    echo "Expansion #4"
                    echo ${testing_expansion4}
                    echo "File expansion #1"
                    echo ${expansion_key_1}
                    echo "File expansion #2"
                    echo ${expansion_key_2}
                    echo "File expansion #3"
                    echo ${expansion_key_3}
                    echo "File expansion #4"
                    echo ${expansion_key_4}
    - name: parameters-env
      commands:
        - func: clone-project
        - command: subprocess.exec
          params:
            binary: bash
            working_dir: src
            args: ["-c", "echo \"Inline 1: $ENV_1 2: $ENV_2 3: $ENV_3 4: $ENV_4\""]
            env:
              ENV_1: "env1_task_env_value"
            include_expansions_in_env:
              - ENV_2
              - ENV_3
              - ENV_4
        - command: subprocess.exec
          params:
            binary: bash
            working_dir: src
            args: ["echo-env.sh"]
            env:
              ENV_1: "env1_task_env_value"
            include_expansions_in_env:
              - ENV_2
              - ENV_3
              - ENV_4
     